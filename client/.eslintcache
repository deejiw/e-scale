[{"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\index.js":"1","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\App.js":"2","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\store.js":"4","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\ItemModal.js":"5","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\ShoppingList.js":"6","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\AppNavBar.js":"7","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reducers\\index.js":"8","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\actions\\itemActions.js":"9","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\actions\\types.js":"10","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reducers\\itemReducer.js":"11","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reducers\\authReducer.js":"12","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reducers\\errorReducer.js":"13","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\actions\\authActions.js":"14","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\actions\\errorActions.js":"15","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\auth\\RegisterModal.js":"16","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\auth\\Logout.js":"17","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\auth\\LoginModal.js":"18"},{"size":472,"mtime":1608176757513,"results":"19","hashOfConfig":"20"},{"size":730,"mtime":1608286855431,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":400,"mtime":1607943668990,"results":"23","hashOfConfig":"20"},{"size":1882,"mtime":1608526613054,"results":"24","hashOfConfig":"20"},{"size":1617,"mtime":1608523172885,"results":"25","hashOfConfig":"20"},{"size":1799,"mtime":1608523088363,"results":"26","hashOfConfig":"20"},{"size":297,"mtime":1608203262281,"results":"27","hashOfConfig":"20"},{"size":1431,"mtime":1608282205349,"results":"28","hashOfConfig":"20"},{"size":604,"mtime":1608259173015,"results":"29","hashOfConfig":"20"},{"size":957,"mtime":1608283930855,"results":"30","hashOfConfig":"20"},{"size":1302,"mtime":1608285544795,"results":"31","hashOfConfig":"20"},{"size":567,"mtime":1608283494687,"results":"32","hashOfConfig":"20"},{"size":2522,"mtime":1608283246994,"results":"33","hashOfConfig":"20"},{"size":307,"mtime":1608262721107,"results":"34","hashOfConfig":"20"},{"size":3404,"mtime":1608548129351,"results":"35","hashOfConfig":"20"},{"size":505,"mtime":1608547846200,"results":"36","hashOfConfig":"20"},{"size":3041,"mtime":1608548300871,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"xwhc8f",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\index.js",[],["82","83"],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\App.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\store.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\ItemModal.js",["84"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from 'reactstrap'\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { addItem } from '../actions/itemActions'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ItemModal = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [name, setName] = useState('')\r\n  const handleToggle = () => setIsOpen(!isOpen)\r\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated)\r\n  const dispatch = useDispatch()\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    dispatch(addItem({ name: name }))\r\n    handleToggle()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isAuthenticated ? (\r\n        <Button\r\n          color='dark'\r\n          style={{ marginBottom: '2rem' }}\r\n          onClick={handleToggle}>\r\n          Add Item\r\n        </Button>\r\n      ) : (\r\n        <h4 className='mb-3 ml-4'>Please login to manage items</h4>\r\n      )}\r\n\r\n      <Modal isOpen={isOpen} handleToggle={handleToggle}>\r\n        <ModalHeader handleToggle={handleToggle}>\r\n          Add To Shopping List\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={handleSubmit}>\r\n            <FormGroup>\r\n              <Label for='item'>Item</Label>\r\n              <Input\r\n                type='text'\r\n                name='name'\r\n                id='item'\r\n                placeholder='Add shopping item'\r\n                onChange={e => setName(e.target.value)}\r\n              />\r\n              <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                Add Item\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nItemModal.propTypes = {\r\n  isAuthenticated: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default ItemModal\r\n","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\ShoppingList.js",["85"],"import React, { useEffect } from 'react'\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getItems, deleteItem } from '../actions/itemActions'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ShoppingList = () => {\r\n  const dispatch = useDispatch()\r\n  const items = useSelector(state => state.item.items)\r\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated)\r\n  useEffect(() => dispatch(getItems()), [])\r\n  const onDeleteClick = id => dispatch(deleteItem(id))\r\n\r\n  return (\r\n    <Container>\r\n      {isAuthenticated ? (\r\n        <ListGroup>\r\n          <TransitionGroup className='shopping-list'>\r\n            {items.map(({ _id, name }) => (\r\n              <CSSTransition key={_id} timeout={500} classNames='fade'>\r\n                <ListGroupItem>\r\n                  <Button\r\n                    className='remove-btn'\r\n                    color='danger'\r\n                    size='sm'\r\n                    onClick={() => onDeleteClick(_id)}>\r\n                    &times;\r\n                  </Button>\r\n                  {name}\r\n                </ListGroupItem>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </ListGroup>\r\n      ) : null}\r\n    </Container>\r\n  )\r\n}\r\n\r\nShoppingList.propTypes = {\r\n  getItems: PropTypes.func.isRequired,\r\n  deleteItem: PropTypes.func.isRequired,\r\n  items: PropTypes.object.isRequired,\r\n  isAuthenticated: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default ShoppingList\r\n","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\AppNavBar.js",["86"],"import React, { useState, Fragment } from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container\r\n} from 'reactstrap'\r\nimport { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport RegisterModal from './auth/RegisterModal'\r\nimport LoginModal from './auth/LoginModal'\r\nimport Logout from './auth/Logout'\r\n\r\nconst AppNavBar = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const handleToggle = () => setIsOpen(!isOpen)\r\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated)\r\n  const user = useSelector(state => state.auth.user)\r\n\r\n  const authLinks = (\r\n    <Fragment>\r\n      <NavItem>\r\n        <span className='navbar-text mr-3'>\r\n          <strong>{user ? `Welcome ${user.name}` : ''}</strong>\r\n        </span>\r\n      </NavItem>\r\n      <NavItem>\r\n        <Logout />\r\n      </NavItem>\r\n    </Fragment>\r\n  )\r\n\r\n  const guestLinks = (\r\n    <Fragment>\r\n      <NavItem>\r\n        <RegisterModal />\r\n      </NavItem>\r\n      <NavItem>\r\n        <LoginModal />\r\n      </NavItem>\r\n    </Fragment>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color='dark' dark expand='sm' className='mb-5'>\r\n        <Container>\r\n          <NavbarBrand href='/'>ShoppingList</NavbarBrand>\r\n          {/* Handle clicking toggle */}\r\n          <NavbarToggler onClick={handleToggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            {/* Margin Left Auto */}\r\n            <Nav className='ml-auto' navbar>\r\n              {isAuthenticated ? authLinks : guestLinks}\r\n            </Nav>\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nAppNavBar.propTypes = {\r\n  isAuthenticated: PropTypes.bool.isRequired,\r\n  user: PropTypes.object\r\n}\r\n\r\nexport default AppNavBar\r\n","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reducers\\index.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\actions\\itemActions.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\actions\\types.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reducers\\itemReducer.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reducers\\authReducer.js",["87"],"import {\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from '../actions/types'\r\n\r\nconst initialState = {\r\n  token: localStorage.getItem('token'),\r\n  isAuthenticated: null,\r\n  isLoading: false,\r\n  user: null\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case USER_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      }\r\n    case USER_LOADED:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        user: action.payload\r\n      }\r\n    case LOGIN_SUCCESS:\r\n    case REGISTER_SUCCESS:\r\n      // Set token to localStorage from payload after success\r\n      localStorage.setItem('token', action.payload.token)\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n        isAuthenticated: true,\r\n        isLoading: false\r\n      }\r\n\r\n    case AUTH_ERROR:\r\n    case LOGIN_FAIL:\r\n    case LOGOUT_SUCCESS:\r\n    case REGISTER_FAIL:\r\n      // Clean up localStorage\r\n      localStorage.removeItem('item')\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\reducers\\errorReducer.js",["88"],"import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types'\r\n\r\nconst initialState = {\r\n  msg: {},\r\n  status: null,\r\n  id: null\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (\r\n    action.type // eslint-disable-line no-unused-vars\r\n  ) {\r\n    case GET_ERRORS:\r\n      return {\r\n        msg: action.payload.msg,\r\n        status: action.payload.status,\r\n        id: action.payload.id\r\n      }\r\n    case CLEAR_ERRORS:\r\n      return {\r\n        msg: {},\r\n        status: null,\r\n        id: null\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\actions\\authActions.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\actions\\errorActions.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\auth\\RegisterModal.js",["89"],"// aka container; a  compoenent that is hooked with redux\r\nimport React, { useState, useRef, useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert\r\n} from 'reactstrap'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { register } from '../../actions/authActions'\r\nimport { clearErrors } from '../../actions/errorActions'\r\n\r\nconst RegisterModal = () => {\r\n  const dispatch = useDispatch()\r\n  const [state, setState] = useState({\r\n    modal: false,\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    msg: null\r\n  })\r\n\r\n  const error = useSelector(state => state.error)\r\n\r\n  const isAuthenticated = useSelector(state => state.isAuthenticated)\r\n\r\n  const usePrevious = value => {\r\n    const ref = useRef()\r\n    useEffect(() => {\r\n      ref.current = value // eslint-disable-next-line\r\n    })\r\n    return ref.current\r\n  }\r\n\r\n  const prevError = usePrevious(error)\r\n\r\n  useEffect(() => {\r\n    if (error !== prevError) {\r\n      // Check for register error\r\n      if (error.id === 'REGISTER_FAIL') {\r\n        setState(prevState => ({ ...prevState, msg: error.msg.msg }))\r\n      } else {\r\n        setState({ msg: null })\r\n      }\r\n    }\r\n    if (state.modal && isAuthenticated) {\r\n      toggle()\r\n    }\r\n  }, [prevError])\r\n\r\n  const toggle = () => {\r\n    dispatch(clearErrors())\r\n    setState(prevState => ({ ...prevState, modal: !prevState.modal }))\r\n  }\r\n\r\n  const onChange = e =>\r\n    setState(prevState => ({ ...prevState, [e.target.name]: e.target.value }))\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault()\r\n    const { name, email, password } = state\r\n    const newUser = {\r\n      name,\r\n      email,\r\n      password\r\n    }\r\n    dispatch(register(newUser))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NavLink onClick={toggle} href='#'>\r\n        Register\r\n      </NavLink>\r\n\r\n      <Modal isOpen={state.modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Register</ModalHeader>\r\n        <ModalBody>\r\n          {state.msg ? <Alert color='danger'>{state.msg}</Alert> : null}\r\n          <Form onSubmit={onSubmit}>\r\n            <FormGroup>\r\n              <Label for='name'>Name</Label>\r\n              <Input\r\n                type='text'\r\n                name='name'\r\n                id='name'\r\n                placeholder='Name'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Input\r\n                type='email'\r\n                name='email'\r\n                id='email'\r\n                placeholder='Email'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Input\r\n                type='password'\r\n                name='password'\r\n                id='password'\r\n                placeholder='Password'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                Register\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nRegisterModal.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n  error: PropTypes.object.isRequired,\r\n  register: PropTypes.func.isRequired,\r\n  clearErrors: PropTypes.func.isRequired\r\n}\r\n\r\nexport default RegisterModal\r\n","C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\auth\\Logout.js",[],"C:\\Users\\tjiw\\Downloads\\mern-app\\client\\src\\components\\auth\\LoginModal.js",["90","91"],"// aka container; a  compoenent that is hooked with redux\r\nimport React, { useState, useRef, useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert\r\n} from 'reactstrap'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { login } from '../../actions/authActions'\r\nimport { clearErrors } from '../../actions/errorActions'\r\n\r\nconst LoginModal = () => {\r\n  const dispatch = useDispatch()\r\n  const [state, setState] = useState({\r\n    modal: false,\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    msg: null\r\n  })\r\n\r\n  const error = useSelector(state => state.error)\r\n\r\n  const isAuthenticated = useSelector(state => state.isAuthenticated)\r\n\r\n  const usePrevious = value => {\r\n    const ref = useRef()\r\n    useEffect(() => {\r\n      ref.current = value\r\n    })\r\n    return ref.current\r\n  }\r\n\r\n  const prevError = usePrevious(error)\r\n\r\n  useEffect(() => {\r\n    if (error !== prevError) {\r\n      // Check for register error\r\n      if (error.id === 'LOGIN_FAIL') {\r\n        setState(prevState => ({ ...prevState, msg: error.msg.msg }))\r\n      } else {\r\n        setState({ msg: null })\r\n      }\r\n    }\r\n    if (state.modal && isAuthenticated) {\r\n      toggle()\r\n    }\r\n  }, [prevError])\r\n\r\n  const toggle = () => {\r\n    dispatch(clearErrors())\r\n    setState(prevState => ({ ...prevState, modal: !prevState.modal }))\r\n  }\r\n\r\n  const onChange = e =>\r\n    setState(prevState => ({ ...prevState, [e.target.name]: e.target.value }))\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault()\r\n    const { email, password } = state\r\n    const user = {\r\n      email,\r\n      password\r\n    }\r\n    dispatch(login(user))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NavLink onClick={toggle} href='#'>\r\n        Login\r\n      </NavLink>\r\n\r\n      <Modal isOpen={state.modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Login</ModalHeader>\r\n        <ModalBody>\r\n          {state.msg ? <Alert color='danger'>{state.msg}</Alert> : null}\r\n          <Form onSubmit={onSubmit}>\r\n            <FormGroup>\r\n              <Input\r\n                type='email'\r\n                name='email'\r\n                id='email'\r\n                placeholder='Email'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Input\r\n                type='password'\r\n                name='password'\r\n                id='password'\r\n                placeholder='Password'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\nLoginModal.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n  error: PropTypes.object.isRequired,\r\n  login: PropTypes.func.isRequired,\r\n  clearErrors: PropTypes.func.isRequired\r\n}\r\n\r\nexport default LoginModal\r\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":27,"nodeType":"98","messageId":"99","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"101","line":12,"column":41,"nodeType":"102","endLine":12,"endColumn":43,"suggestions":"103"},{"ruleId":"96","severity":1,"message":"104","line":9,"column":3,"nodeType":"98","messageId":"99","endLine":9,"endColumn":10},{"ruleId":"105","severity":1,"message":"106","line":19,"column":1,"nodeType":"107","endLine":62,"endColumn":2},{"ruleId":"105","severity":1,"message":"106","line":9,"column":1,"nodeType":"107","endLine":28,"endColumn":2},{"ruleId":"100","severity":1,"message":"108","line":56,"column":6,"nodeType":"102","endLine":56,"endColumn":17,"suggestions":"109"},{"ruleId":"96","severity":1,"message":"110","line":10,"column":3,"nodeType":"98","messageId":"99","endLine":10,"endColumn":8},{"ruleId":"100","severity":1,"message":"108","line":56,"column":6,"nodeType":"102","endLine":56,"endColumn":17,"suggestions":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["114"],"'NavLink' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'error', 'isAuthenticated', 'state.modal', and 'toggle'. Either include them or remove the dependency array.",["115"],"'Label' is defined but never used.",["116"],"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"119","fix":"121"},"Update the dependencies array to be: [dispatch]",{"range":"122","text":"123"},"Update the dependencies array to be: [error, isAuthenticated, prevError, state.modal, toggle]",{"range":"124","text":"125"},{"range":"126","text":"125"},[582,584],"[dispatch]",[1351,1362],"[error, isAuthenticated, prevError, state.modal, toggle]",[1314,1325]]