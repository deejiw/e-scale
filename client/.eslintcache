[{"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\index.js":"1","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\App.js":"2","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reportWebVitals.js":"3","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\store.js":"4","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\AppNavBar.js":"5","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\authActions.js":"6","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\errorActions.js":"7","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\types.js":"8","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\index.js":"9","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\auth\\LoginModal.js":"10","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\auth\\RegisterModal.js":"11","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\auth\\Logout.js":"12","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\errorReducer.js":"13","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\authReducer.js":"14","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\transactionActions.js":"15","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\MainList.js":"16","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\AddModal.js":"17","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\EditModal.js":"18","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\Partner.js":"19","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\CheckModal.js":"20","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\partnerActions.js":"21","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\types.js":"22","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\DeleteModal.js":"23","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\search\\PartnerSearch.js":"24","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\partnerReducer.js":"25","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\transactionReducer.js":"26","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\master\\banks.js":"27","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\master\\accountTypes.js":"28","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\auth\\customHook.js":"29"},{"size":488,"mtime":1608550931749,"results":"30","hashOfConfig":"31"},{"size":678,"mtime":1609930470409,"results":"32","hashOfConfig":"31"},{"size":375,"mtime":1608550931752,"results":"33","hashOfConfig":"31"},{"size":400,"mtime":1608550931753,"results":"34","hashOfConfig":"31"},{"size":1877,"mtime":1608811708037,"results":"35","hashOfConfig":"31"},{"size":2522,"mtime":1608550931744,"results":"36","hashOfConfig":"31"},{"size":307,"mtime":1608550931744,"results":"37","hashOfConfig":"31"},{"size":1038,"mtime":1611144237500,"results":"38","hashOfConfig":"31"},{"size":376,"mtime":1609995546692,"results":"39","hashOfConfig":"31"},{"size":2825,"mtime":1611144584721,"results":"40","hashOfConfig":"31"},{"size":3197,"mtime":1611144584723,"results":"41","hashOfConfig":"31"},{"size":529,"mtime":1608963089649,"results":"42","hashOfConfig":"31"},{"size":550,"mtime":1608605825502,"results":"43","hashOfConfig":"31"},{"size":1331,"mtime":1608605941639,"results":"44","hashOfConfig":"31"},{"size":2718,"mtime":1611144237501,"results":"45","hashOfConfig":"31"},{"size":8072,"mtime":1610691677725,"results":"46","hashOfConfig":"31"},{"size":3066,"mtime":1611044611538,"results":"47","hashOfConfig":"31"},{"size":8202,"mtime":1611024749957,"results":"48","hashOfConfig":"31"},{"size":2869,"mtime":1608967112623,"results":"49","hashOfConfig":"31"},{"size":21781,"mtime":1611147211553,"results":"50","hashOfConfig":"31"},{"size":1776,"mtime":1610599774110,"results":"51","hashOfConfig":"31"},{"size":164,"mtime":1609399126735,"results":"52","hashOfConfig":"31"},{"size":1321,"mtime":1609993787520,"results":"53","hashOfConfig":"31"},{"size":11111,"mtime":1611134790102,"results":"54","hashOfConfig":"31"},{"size":1089,"mtime":1610427582170,"results":"55","hashOfConfig":"31"},{"size":1057,"mtime":1608631160228,"results":"56","hashOfConfig":"31"},{"size":712,"mtime":1610098110297,"results":"57","hashOfConfig":"31"},{"size":126,"mtime":1610696754669,"results":"58","hashOfConfig":"31"},{"size":601,"mtime":1611142252999,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"18k59in",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\index.js",[],["125","126"],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\App.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reportWebVitals.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\store.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\AppNavBar.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\authActions.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\errorActions.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\types.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\index.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\auth\\LoginModal.js",["127"],"// aka container; a  compoenent that is hooked with redux\r\nimport React, { useState, useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  NavLink,\r\n  Alert\r\n} from 'reactstrap'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { login } from '../../actions/authActions'\r\nimport { clearErrors } from '../../actions/errorActions'\r\nimport { usePrevious, updatePrevError } from './customHook'\r\n\r\nconst LoginModal = () => {\r\n  const dispatch = useDispatch()\r\n  const [state, setState] = useState({\r\n    modal: false,\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    msg: null\r\n  })\r\n\r\n  const error = useSelector(state => state.error)\r\n\r\n  const isAuthenticated = useSelector(state => state.isAuthenticated)\r\n\r\n  const prevError = usePrevious(error)\r\n\r\n  useEffect(() => {\r\n    updatePrevError(\r\n      'LOGIN_FAIL',\r\n      state,\r\n      error,\r\n      prevError,\r\n      isAuthenticated,\r\n      setState,\r\n      toggle\r\n    )\r\n  }, [prevError])\r\n\r\n  const toggle = () => {\r\n    dispatch(clearErrors())\r\n    setState(prevState => ({ ...prevState, modal: !prevState.modal }))\r\n  }\r\n\r\n  const onChange = e =>\r\n    setState(prevState => ({ ...prevState, [e.target.name]: e.target.value }))\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault()\r\n    const { email, password } = state\r\n    const user = {\r\n      email,\r\n      password\r\n    }\r\n    dispatch(login(user))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NavLink onClick={toggle} href='#'>\r\n        Login\r\n      </NavLink>\r\n\r\n      <Modal isOpen={state.modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Login</ModalHeader>\r\n        <ModalBody>\r\n          {state.msg ? <Alert color='danger'>{state.msg}</Alert> : null}\r\n          <Form onSubmit={onSubmit}>\r\n            <FormGroup>\r\n              <Input\r\n                type='email'\r\n                name='email'\r\n                id='email'\r\n                placeholder='Email'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Input\r\n                type='password'\r\n                name='password'\r\n                id='password'\r\n                placeholder='Password'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                เข้าสู่ระบบ\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\nLoginModal.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n  error: PropTypes.object.isRequired,\r\n  login: PropTypes.func.isRequired,\r\n  clearErrors: PropTypes.func.isRequired\r\n}\r\n\r\nexport default LoginModal\r\n","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\auth\\RegisterModal.js",["128"],"// aka container; a  compoenent that is hooked with redux\r\nimport React, { useState, useRef, useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert\r\n} from 'reactstrap'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { register } from '../../actions/authActions'\r\nimport { clearErrors } from '../../actions/errorActions'\r\nimport { usePrevious, updateError } from './customHook'\r\n\r\nconst RegisterModal = () => {\r\n  const dispatch = useDispatch()\r\n  const [state, setState] = useState({\r\n    modal: false,\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    msg: null\r\n  })\r\n\r\n  const error = useSelector(state => state.error)\r\n\r\n  const isAuthenticated = useSelector(state => state.isAuthenticated)\r\n\r\n  const prevError = usePrevious(error)\r\n\r\n  useEffect(() => {\r\n    updateError(\r\n      'REGISTER_FAIL',\r\n      state,\r\n      error,\r\n      prevError,\r\n      isAuthenticated,\r\n      setState,\r\n      toggle\r\n    ) // eslint-disable-next-line\r\n  }, prevError)\r\n\r\n  const toggle = () => {\r\n    dispatch(clearErrors())\r\n    setState(prevState => ({ ...prevState, modal: !prevState.modal }))\r\n  }\r\n\r\n  const onChange = e =>\r\n    setState(prevState => ({ ...prevState, [e.target.name]: e.target.value }))\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault()\r\n    const { name, email, password } = state\r\n    const newUser = {\r\n      name,\r\n      email,\r\n      password\r\n    }\r\n    dispatch(register(newUser))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NavLink onClick={toggle} href='#'>\r\n        Register\r\n      </NavLink>\r\n\r\n      <Modal isOpen={state.modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Register</ModalHeader>\r\n        <ModalBody>\r\n          {state.msg ? <Alert color='danger'>{state.msg}</Alert> : null}\r\n          <Form onSubmit={onSubmit}>\r\n            <FormGroup>\r\n              <Label for='name'>ชื่อ-นามสกุล</Label>\r\n              <Input\r\n                type='text'\r\n                name='name'\r\n                id='name'\r\n                placeholder='Name'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Input\r\n                type='email'\r\n                name='email'\r\n                id='email'\r\n                placeholder='Email'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Input\r\n                type='password'\r\n                name='password'\r\n                id='password'\r\n                placeholder='Password'\r\n                className='mb-3'\r\n                onChange={onChange}\r\n              />\r\n              <Button color='dark' style={{ marginTop: '2rem' }} block>\r\n                ลงทะเบียน\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nRegisterModal.propTypes = {\r\n  isAuthenticated: PropTypes.bool,\r\n  error: PropTypes.object.isRequired,\r\n  register: PropTypes.func.isRequired,\r\n  clearErrors: PropTypes.func.isRequired\r\n}\r\n\r\nexport default RegisterModal\r\n","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\auth\\Logout.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\errorReducer.js",[],["129","130"],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\authReducer.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\transactionActions.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\MainList.js",["131","132"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Container,\r\n  ListGroup,\r\n  ListGroupItem\r\n} from 'reactstrap'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport {\r\n  addTransaction,\r\n  getTransactions,\r\n  updateTransaction\r\n} from '../actions/transactionActions'\r\n\r\nimport { ADD_MODAL, CHECK_MODAL, EDIT_MODAL, DELETE_MODAL } from './modal/types'\r\nimport AddModal from './modal/AddModal'\r\nimport EditModal from './modal/EditModal'\r\nimport CheckModal from './modal/CheckModal'\r\nimport PropTypes from 'prop-types'\r\nimport DeleteModal from './modal/DeleteModal'\r\n\r\nexport const paymentTemplate = {\r\n  type: '',\r\n  bank: '',\r\n  accountNumber: '',\r\n  accountName: ''\r\n}\r\n\r\n// ****************MainList*******************\r\nconst MainList = () => {\r\n  const dispatch = useDispatch()\r\n  // eslint-disable-next-line\r\n  useEffect(() => dispatch(getTransactions()))\r\n  const items = useSelector(_ => _.transaction.items)\r\n  const isAuthenticated = useSelector(_ => _.auth.isAuthenticated)\r\n\r\n  const carTemplate = {\r\n    plate: ''\r\n  }\r\n\r\n  const recordTemplate = {\r\n    material: '',\r\n    weighIn: 0,\r\n    weighOut: 0,\r\n    deduction: 0,\r\n    remarks: '',\r\n    price: 0,\r\n    amount: 0\r\n  }\r\n  const recordsTemplate = {\r\n    carTemplate,\r\n    record: [recordTemplate]\r\n  }\r\n\r\n  const [plate, setPlate] = useState([carTemplate])\r\n\r\n  const [header, setHeader] = useState({\r\n    isOpen: false,\r\n    type: '',\r\n    id: '',\r\n    name: '',\r\n    totalAmount: 0\r\n  })\r\n\r\n  const [records, setRecords] = useState([recordsTemplate])\r\n  const [payment, setPayment] = useState([paymentTemplate])\r\n\r\n  //onChange handlers\r\n  const changeHeader = e =>\r\n    setHeader({ ...header, [e.target.name]: e.target.value })\r\n\r\n  const changePlate = (i, e) => {\r\n    const values = [...plate]\r\n    values[i][e.target.name] = e.target.value\r\n    setPlate(values)\r\n  }\r\n  const changeRecord = (i, j, e) => {\r\n    const values = [...records]\r\n    values[i].record[j][e.target.name] = e.target.value\r\n    setRecords(values)\r\n  }\r\n\r\n  const [viewDelete, setViewDelete] = useState({\r\n    isOpen: false,\r\n    buttonText: 'แก้ไข'\r\n  })\r\n\r\n  const openViewDelete = (modalType, item) =>\r\n    setHeader({\r\n      isOpen: true,\r\n      type: modalType,\r\n      id: item._id,\r\n      name: item.name\r\n    })\r\n\r\n  const openViewAdd = modalType =>\r\n    setHeader({\r\n      isOpen: true,\r\n      type: modalType\r\n    })\r\n  const openViewEdit = (modalType, item) => {\r\n    setHeader({\r\n      isOpen: true,\r\n      type: modalType,\r\n      id: item._id,\r\n      name: item.name\r\n    })\r\n\r\n    setRecords(item.records)\r\n  }\r\n  const openViewCheck = (modalType, item) => {\r\n    setHeader({\r\n      isOpen: true,\r\n      type: modalType,\r\n      id: item._id,\r\n      name: item.name\r\n    })\r\n    setRecords(item.records)\r\n\r\n    // setPayment(tempPayment)\r\n  }\r\n\r\n  // Handle plate\r\n  const addPlate = () => setPlate([...plate, carTemplate])\r\n  const removePlate = i => {\r\n    const values = [...plate]\r\n    values.splice(i, 1)\r\n    setPlate(values)\r\n  }\r\n\r\n  // Handle record\r\n  const addRecord = i => {\r\n    setRecords(prevRecords => {\r\n      const lastIndex = prevRecords[i].record.length - 1\r\n      const prevWeightOut = () => {\r\n        switch (lastIndex) {\r\n          case -1:\r\n            return 0\r\n          default:\r\n            return prevRecords[i].record[lastIndex].weighOut\r\n        }\r\n      }\r\n\r\n      return prevRecords.map((car, index) =>\r\n        index === i\r\n          ? {\r\n              ...car,\r\n              record: [\r\n                ...car.record,\r\n                { recordTemplate, weighIn: prevWeightOut() }\r\n              ]\r\n            }\r\n          : car\r\n      )\r\n    })\r\n  }\r\n\r\n  const removeRecord = (i, j) => {\r\n    setRecords(prevRecords => {\r\n      prevRecords[i].record.splice(j, 1)\r\n      return prevRecords.map((car, index) =>\r\n        index === i ? { ...car, record: prevRecords[i].record } : car\r\n      )\r\n    })\r\n  }\r\n\r\n  const submitAdd = e => {\r\n    e.preventDefault()\r\n    dispatch(addTransaction(header.name, plate))\r\n    closeModal()\r\n  }\r\n  const submitEdit = e => {\r\n    e.preventDefault()\r\n    dispatch(updateTransaction(header, records))\r\n    closeModal()\r\n  }\r\n  const submitCheck = e => {\r\n    e.preventDefault()\r\n    //dispatch(checkTransaction(header, totalAmount))\r\n    closeModal()\r\n  }\r\n\r\n  const closeModal = () => {\r\n    setHeader({ isOpen: false })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <AddModal\r\n          header={header}\r\n          plate={plate}\r\n          changeHeader={changeHeader}\r\n          changePlate={changePlate}\r\n          handleAddPlate={addPlate}\r\n          handleRemovePlate={removePlate}\r\n          handleSubmit={submitAdd}\r\n          toggle={closeModal}\r\n        />\r\n\r\n        {isAuthenticated ? (\r\n          <div style={{ margin: '-1rem 0 0 0' }}>\r\n            <Button // Add Record\r\n              color='success'\r\n              style={{ margin: '0 0.5rem 1rem 0' }}\r\n              onClick={() => openViewAdd(ADD_MODAL)}>\r\n              บิลใหม่\r\n            </Button>\r\n\r\n            <Button // Edit\r\n              color={viewDelete.buttonText === 'แก้ไข' ? 'primary' : 'warning'}\r\n              style={{ marginBottom: '1rem', marginRight: '0.5rem' }}\r\n              onClick={() =>\r\n                setViewDelete({\r\n                  isOpen: !viewDelete.isOpen,\r\n                  buttonText:\r\n                    viewDelete.buttonText === 'แก้ไข' ? 'เสร็จ' : 'แก้ไข'\r\n                })\r\n              }>\r\n              {viewDelete.buttonText}\r\n            </Button>\r\n\r\n            <ListGroup>\r\n              {items.map(item => (\r\n                <ListGroupItem>\r\n                  {viewDelete.isOpen ? (\r\n                    <ButtonGroup>\r\n                      <Button\r\n                        className='remove-btn'\r\n                        color='danger'\r\n                        size='sm'\r\n                        onClick={() => openViewDelete(DELETE_MODAL, item)}>\r\n                        &times;\r\n                      </Button>\r\n                      <Button\r\n                        color='warning'\r\n                        size='sm'\r\n                        onClick={() => openViewCheck(CHECK_MODAL, item)}>\r\n                        สรุปยอด\r\n                      </Button>\r\n                    </ButtonGroup>\r\n                  ) : null}\r\n                  <Button\r\n                    onClick={() => openViewEdit(EDIT_MODAL, item)}\r\n                    color='dark'>\r\n                    {item.name}\r\n                  </Button>\r\n\r\n                  <EditModal\r\n                    header={header}\r\n                    records={records}\r\n                    changeHeader={changeHeader}\r\n                    changeRecord={changeRecord}\r\n                    handleAddRecord={addRecord}\r\n                    handleRemoveRecord={removeRecord}\r\n                    handleSubmit={submitEdit}\r\n                    toggle={closeModal}\r\n                  />\r\n                  <CheckModal\r\n                    header={header}\r\n                    records={records}\r\n                    changeHeader={changeHeader}\r\n                    handleSubmit={submitCheck}\r\n                    toggle={closeModal}\r\n                  />\r\n\r\n                  <DeleteModal header={header} toggle={closeModal} />\r\n                </ListGroupItem>\r\n              ))}\r\n            </ListGroup>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h4 className='mb-3 ml-4'>Welcome to e-Scale Record System</h4>\r\n            <br />\r\n            <h4 className='mb-3 ml-4'>Please login to access the system</h4>\r\n          </div>\r\n        )}\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nMainList.propTypes = {\r\n  getTransactions: PropTypes.func.isRequired,\r\n  addTransaction: PropTypes.func.isRequired,\r\n  updateTransaction: PropTypes.func.isRequired,\r\n  openViewDelete: PropTypes.func.isRequired,\r\n  items: PropTypes.object.isRequired,\r\n  isAuthenticated: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default MainList\r\n","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\AddModal.js",["133"],"import React, { useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Col\r\n} from 'reactstrap'\r\nimport { Container, TextField } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { ADD_MODAL } from './types'\r\nimport PartnerSearch from '../search/PartnerSearch'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(0.75, 0)\r\n    }\r\n  }\r\n}))\r\n\r\nconst AddModal = ({\r\n  header,\r\n  plate,\r\n  changeHeader,\r\n  changePlate,\r\n  handleSubmit,\r\n  handleAddPlate,\r\n  handleRemovePlate,\r\n  toggle\r\n}) => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Modal isOpen={header.isOpen && header.type === ADD_MODAL} toggle={toggle}>\r\n      <ModalHeader toggle={toggle}>เพิ่มบิลใหม่</ModalHeader>\r\n      <ModalBody>\r\n        <Form className={classes.root}>\r\n          <Container>\r\n            <h6>คู่ค้า</h6>\r\n            <Row style={{ margin: '0 0 -1rem -1rem' }}>\r\n              <Col>\r\n                <PartnerSearch changeHeader={changeHeader} />\r\n              </Col>\r\n            </Row>\r\n            <hr />\r\n            <h6>รถยนต์</h6>\r\n            {plate.map((car, index) => (\r\n              <div key={index}>\r\n                <Row style={{ margin: '0 0 0.5rem -1rem' }}>\r\n                  <Col xs='8' sm='8'>\r\n                    <TextField\r\n                      name='plate'\r\n                      label='ทะเบียน (XX-XXXX)'\r\n                      variant='outlined'\r\n                      id='plate'\r\n                      margin='dense'\r\n                      autoFocus='true'\r\n                      required='true'\r\n                      value={car.plate}\r\n                      onChange={e => changePlate(index, e)}\r\n                    />\r\n                  </Col>\r\n                  <Col style={{ margin: '0 0 0 -1.25rem' }}>\r\n                    <Button\r\n                      onClick={() => handleRemovePlate(index)}\r\n                      style={\r\n                        ({ margin: '0 0 0 -2rem' },\r\n                        { padding: '0.75rem 1.25rem 0.75rem 1.25rem' })\r\n                      }\r\n                      xs='2'\r\n                      sm='2'\r\n                      bold='true'\r\n                      color='danger'>\r\n                      &minus;\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            ))}\r\n            <Button\r\n              style={{ margin: '-0.25rem 0 0 0' }}\r\n              onClick={() => handleAddPlate()}\r\n              color='secondary'>\r\n              เพิ่มรถ\r\n            </Button>\r\n            <Button\r\n              color='success'\r\n              style={{ margin: '1.5rem 0 0 0' }}\r\n              block\r\n              onClick={handleSubmit}>\r\n              บันทึกบิลใหม่\r\n            </Button>\r\n          </Container>\r\n        </Form>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default AddModal\r\n","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\EditModal.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\Partner.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\CheckModal.js",["134","135","136","137","138"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Container,\r\n  FormControlLabel,\r\n  TextField,\r\n  MenuItem,\r\n  Grid,\r\n  Radio,\r\n  Checkbox\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Row,\r\n  Label,\r\n  Alert\r\n} from 'reactstrap'\r\nimport { CHECK_MODAL } from './types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getPartners } from '../../actions/partnerActions'\r\nimport { checkSelectedPayment } from '../../actions/transactionActions'\r\nimport { paymentTemplate } from '../MainList'\r\nimport { accountTypes } from '../master/accountTypes'\r\nimport { banks } from '../master/banks'\r\nimport { usePrevious, updateError } from '../auth/customHook'\r\n\r\nconst initialState = {\r\n  isOpen: false,\r\n  isAccount: false,\r\n  isAccountReadOnly: false,\r\n  isReadOnly: false,\r\n  selected: 0,\r\n  isCash: false,\r\n  cashAmount: 0,\r\n  totalAmount: 0,\r\n  msg: null\r\n}\r\n\r\nconst CheckModal = ({\r\n  header,\r\n  records,\r\n  changeHeader,\r\n  handleSubmit,\r\n  toggle\r\n}) => {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(getPartners(header.name))\r\n    calculateTotal()\r\n    return () => {\r\n      setState(initialState)\r\n      setActivePayment([])\r\n    }\r\n  }, [header.isOpen])\r\n\r\n  const error = useSelector(state => state.error)\r\n\r\n  const isAuthenticated = useSelector(state => state.isAuthenticated)\r\n\r\n  const prevError = usePrevious(error)\r\n\r\n  useEffect(() => {\r\n    updateError(\r\n      'SELECT_PAYMENT_FAIL',\r\n      state,\r\n      error,\r\n      prevError,\r\n      isAuthenticated,\r\n      setState,\r\n      toggleModal\r\n    ) // eslint-disable-next-line\r\n  }, [prevError])\r\n\r\n  const activePartner = useSelector(_ => _.partner.items[0])\r\n\r\n  const [payment, setPayment] = useState([])\r\n\r\n  useEffect(() => setPayment(activePartner ? activePartner.payment : []), [\r\n    activePartner\r\n  ])\r\n\r\n  const [state, setState] = useState(initialState)\r\n\r\n  const [activePayment, setActivePayment] = useState({\r\n    ...paymentTemplate\r\n  })\r\n\r\n  const [viewModal, setViewModal] = useState(false)\r\n\r\n  const appendPayment = () => {\r\n    setPayment([...payment, activePayment])\r\n  }\r\n  const selectActivePayment = e => {\r\n    e.preventDefault()\r\n    toggleModal()\r\n    // dispatch(checkSelectedPayment(state.selected))\r\n    setActivePayment(payment[state.selected])\r\n    setState({\r\n      isOpen: true,\r\n      isReadOnly: true,\r\n      isAccountReadOnly: true\r\n    })\r\n  }\r\n\r\n  const changeActivePayment = e =>\r\n    setActivePayment({ ...activePayment, [e.target.name]: e.target.value })\r\n\r\n  const changeRadio = e => {\r\n    setState({ ...state, selected: e.target.value })\r\n  }\r\n\r\n  const toggleCash = () => {\r\n    setState({ ...state, isCash: !state.isCash })\r\n  }\r\n  const subAmount = []\r\n\r\n  const netWeight = (weighIn, weighOut, deduction) =>\r\n    weighIn - weighOut - deduction\r\n\r\n  const amount = (i, j, netWeight, price) => {\r\n    const _ = netWeight * price\r\n    if (!subAmount[(i, j)]) {\r\n      subAmount[(i, j)] = _\r\n    }\r\n    return _\r\n  }\r\n\r\n  const calculateTotal = () => {\r\n    const total = subAmount.reduce((a, b) => a + b, 0)\r\n    setState({ ...state, totalAmount: total })\r\n  }\r\n\r\n  const formatComma = number => {\r\n    return number\r\n      ? number.toLocaleString(undefined, {\r\n          maximumFractionDigits: 2\r\n        })\r\n      : 0\r\n  }\r\n\r\n  const formatAccountNumber = accountNumber => {\r\n    return accountNumber\r\n      ? accountNumber\r\n          .replace(/[^0-9]/g, '')\r\n          .match(/.{1,4}/g)\r\n          ?.join('-')\r\n          .substr(0, 12) || ''\r\n      : null\r\n  }\r\n\r\n  const toggleModal = () => {\r\n    setViewModal(!viewModal)\r\n  }\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={header.isOpen && header.type === CHECK_MODAL}\r\n        toggle={toggle}>\r\n        <ModalHeader toggle={toggle} onChange={changeHeader}>\r\n          สรุปยอด {header.name}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Container fluid>\r\n              <Grid //Header\r\n                container\r\n                spacing={1}\r\n                direction='row'\r\n                justify='space-between'\r\n                alignItems='center'>\r\n                <Grid item xs='4' sm='4'>\r\n                  <Row>\r\n                    <h6>สินค้า</h6>\r\n                  </Row>\r\n                  <Row style={{ margin: '-0.5rem 0 0 -1rem' }}>\r\n                    <h6>หมายเหตุ</h6>\r\n                  </Row>\r\n                </Grid>\r\n                <Grid item xs='2' sm='2'>\r\n                  <Row>\r\n                    <h6>เข้า</h6>\r\n                  </Row>\r\n                  <Row style={{ margin: '-0.5rem 0 0 -1rem' }}>\r\n                    <h6>(ออก)</h6>\r\n                  </Row>\r\n                </Grid>\r\n                <Grid item xs='1' sm='1'>\r\n                  <Row>\r\n                    <h6>สุทธิ</h6>\r\n                  </Row>\r\n                  <Row style={{ margin: '-0.5rem 0 0 -1rem' }}>\r\n                    <h6>(หัก)</h6>\r\n                  </Row>\r\n                </Grid>\r\n                <Grid item xs='2' sm='2'>\r\n                  <h6>ราคา</h6>\r\n                </Grid>\r\n                <Grid item xs='2.5' sm='2.5'>\r\n                  <h6>จำนวนเงิน</h6>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {records.map((\r\n                record,\r\n                i //Records\r\n              ) => (\r\n                <div key={i}>\r\n                  <Label style={{ margin: '0 0 0.5rem -1.5rem' }}>\r\n                    #{record.plate}\r\n                  </Label>\r\n\r\n                  {record.record.map((_, j) => (\r\n                    <div key={j}>\r\n                      <Grid\r\n                        container\r\n                        spacing={1}\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='flex-start'>\r\n                        <Grid item xs='4' sm='4'>\r\n                          <Row>{_.material}</Row>\r\n                          <Row style={{ margin: '-0.5rem 0 0 -1rem' }}>\r\n                            ({_.remarks})\r\n                          </Row>\r\n                        </Grid>\r\n                        <Grid item xs='2' sm='2'>\r\n                          <Row>{formatComma(_.weighIn)}</Row>\r\n                          <Row style={{ margin: '-0.5rem 0 0 -1rem' }}>\r\n                            ({formatComma(_.weighOut)})\r\n                          </Row>\r\n                        </Grid>\r\n                        <Grid item xs='1' sm='1'>\r\n                          <Row>\r\n                            {formatComma(\r\n                              netWeight(_.weighIn, _.weighOut, _.deduction)\r\n                            )}\r\n                          </Row>\r\n                          <Row style={{ margin: '-0.5rem 0 0 -1rem' }}>\r\n                            ({formatComma(_.deduction)})\r\n                          </Row>\r\n                        </Grid>\r\n                        <Grid item xs='2' sm='2'>\r\n                          {_.price}\r\n                        </Grid>\r\n                        <Grid item xs='2.5' sm='2.5'>\r\n                          <Label>\r\n                            ฿\r\n                            {formatComma(\r\n                              amount(\r\n                                i,\r\n                                j,\r\n                                netWeight(_.weighIn, _.weighOut, _.deduction),\r\n                                _.price\r\n                              )\r\n                            )}\r\n                          </Label>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </div>\r\n                  ))}\r\n\r\n                  <hr />\r\n                </div>\r\n              ))}\r\n\r\n              <Grid //Total Amount\r\n                container\r\n                spacing={1}\r\n                direction='row'\r\n                justify='flex-end'\r\n                alignItems='center'\r\n                style={{ margin: '-0.5rem 0 -1rem 0' }}>\r\n                <Grid item xs={2.5} sm={2.5}>\r\n                  <Label>ยอดรวมทั้งสิ้น</Label>\r\n                </Grid>\r\n                <Grid item xs={2.5} sm={2.5}>\r\n                  <h5>฿{formatComma(state.totalAmount)}</h5>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <hr />\r\n              <h5>การชำระเงิน</h5>\r\n\r\n              <Modal isOpen={viewModal} toggle={toggleModal}>\r\n                <ModalHeader toggle={toggleModal}>\r\n                  เลือกวิธีการจ่ายเงิน\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                  {state.msg ? <Alert color='danger'>{state.msg}</Alert> : null}\r\n                  <Form>\r\n                    <FormGroup>\r\n                      {payment.map((_, index) => (\r\n                        <div key={index}>\r\n                          <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction='row'\r\n                            justify='flex-start'\r\n                            alignItems='top'>\r\n                            <Grid item xs={1.5} sm={1.5}>\r\n                              <Radio\r\n                                // eslint-disable-next-line\r\n                                checked={state.selected == index}\r\n                                onChange={changeRadio}\r\n                                value={index}\r\n                                name='paymentRadio'\r\n                                color='default'\r\n                                inputProps={{ 'aria-label': 0 }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item xs={5} sm={5}>\r\n                              <TextField\r\n                                name='type'\r\n                                id='type'\r\n                                label='ประเภท'\r\n                                size='small'\r\n                                value={_.type}\r\n                                InputProps={{\r\n                                  readOnly: true\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={5} sm={5}>\r\n                              <TextField\r\n                                name='bank'\r\n                                id='bank'\r\n                                label='ธนาคาร'\r\n                                size='small'\r\n                                value={_.accountName}\r\n                                InputProps={{\r\n                                  readOnly: true\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={6} sm={6}>\r\n                              <TextField\r\n                                name='accountNumber'\r\n                                id='accountNumber'\r\n                                label='เลขบัญชี'\r\n                                size='small'\r\n                                placeholder='เลขบัญชี (10 หลัก)'\r\n                                value={_.accountNumber}\r\n                                InputProps={{\r\n                                  readOnly: true\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={6}>\r\n                              <TextField\r\n                                name='accountName'\r\n                                id='accountName'\r\n                                label='ชื่อ'\r\n                                size='small'\r\n                                value={_.accountName}\r\n                                InputProps={{\r\n                                  readOnly: true\r\n                                }}\r\n                              />\r\n                            </Grid>\r\n                          </Grid>\r\n                        </div>\r\n                      ))}\r\n\r\n                      <Button\r\n                        onClick={selectActivePayment}\r\n                        color='primary'\r\n                        style={{ margin: '1rem 0 0 0' }}\r\n                        block>\r\n                        เลือก\r\n                      </Button>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </ModalBody>\r\n              </Modal>\r\n\r\n              <Grid\r\n                container\r\n                spacing={1}\r\n                direction='row'\r\n                justify='flex-start'\r\n                alignItems='center'\r\n                style={{ margin: '-0.5rem 0 0.25rem -0.5rem' }}>\r\n                <Grid item>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        disabled={state.isAccountReadOnly}\r\n                        checked={state.isAccount}\r\n                        onChange={() => {\r\n                          if (!state.isAccount) {\r\n                            toggleModal()\r\n                          } else {\r\n                            setState({\r\n                              ...state,\r\n                              isAccount: false,\r\n                              isReadOnly: false\r\n                            })\r\n                            setActivePayment([])\r\n                          }\r\n                        }}\r\n                        name='isAccount'\r\n                        color='primary'\r\n                      />\r\n                    }\r\n                    label='บัญชีธนาคาร'\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Button\r\n                    color={state.isReadOnly ? 'danger' : 'info'}\r\n                    onClick={() => {\r\n                      console.log(state)\r\n                      if (\r\n                        !state.isReadOnly &&\r\n                        activePayment.length == 0 &&\r\n                        !state.isOpen &&\r\n                        payment.length !== 0\r\n                      ) {\r\n                        setState({\r\n                          ...state,\r\n                          isAccount: true,\r\n                          isAccountReadOnly: true,\r\n                          isOpen: true\r\n                        })\r\n                      } else if (\r\n                        !state.isReadOnly &&\r\n                        activePayment.length !== 0 &&\r\n                        state.isOpen\r\n                      ) {\r\n                        setState({\r\n                          ...state,\r\n                          isReadOnly: true\r\n                        })\r\n                      } else if (state.isReadOnly && state.isAccountReadOnly) {\r\n                        setActivePayment([])\r\n                        setState({\r\n                          ...state,\r\n                          isReadOnly: false,\r\n                          isAccountReadOnly: false,\r\n                          isOpen: false,\r\n                          isAccount: false\r\n                        })\r\n                      }\r\n                    }}>\r\n                    {state.isReadOnly\r\n                      ? 'ล้างค่า'\r\n                      : state.isOpen\r\n                      ? 'บันทึก'\r\n                      : 'เพิ่มใหม่'}\r\n                  </Button>\r\n                </Grid>\r\n\r\n                {state.isAccountReadOnly && !state.isReadOnly ? (\r\n                  <Grid item>\r\n                    <Button\r\n                      color='danger'\r\n                      onClick={() =>\r\n                        setState({\r\n                          ...state,\r\n                          isOpen: false,\r\n                          isAccount: false,\r\n                          isAccountReadOnly: false\r\n                        })\r\n                      }>\r\n                      ยกเลิก\r\n                    </Button>\r\n                  </Grid>\r\n                ) : null}\r\n              </Grid>\r\n\r\n              {state.isOpen ? (\r\n                <Grid\r\n                  container\r\n                  spacing={0.5}\r\n                  direction='row'\r\n                  justify='space-between'\r\n                  alignItems='center'>\r\n                  <Grid item xs={12} sm={6} md={6}>\r\n                    <TextField\r\n                      select\r\n                      name='type'\r\n                      id='type'\r\n                      type='text'\r\n                      label='ประเภท'\r\n                      variant='outlined'\r\n                      fullWidth='true'\r\n                      size='small'\r\n                      required='true'\r\n                      value={activePayment.type}\r\n                      defaultValue='0'\r\n                      InputProps={{\r\n                        readOnly: state.isReadOnly\r\n                      }}\r\n                      onChange={e => changeActivePayment(e)}>\r\n                      {accountTypes.map(option => (\r\n                        <MenuItem key={option.value} value={option.label}>\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={5.5}>\r\n                    <TextField\r\n                      select\r\n                      name='bank'\r\n                      id='bank'\r\n                      label='ธนาคาร'\r\n                      variant='outlined'\r\n                      fullWidth='true'\r\n                      size='small'\r\n                      required='true'\r\n                      value={activePayment.bank}\r\n                      InputProps={{\r\n                        readOnly: state.isReadOnly\r\n                      }}\r\n                      onChange={e => changeActivePayment(e)}>\r\n                      {banks.map(option => (\r\n                        <MenuItem key={option.value} value={option.label}>\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    spacing={24}\r\n                    direction='row'\r\n                    justify='space-between'\r\n                    alignItems='center'>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                      <TextField\r\n                        name='accountNumber'\r\n                        id='accountNumber'\r\n                        type='text'\r\n                        label='เลชบัญชี'\r\n                        variant='outlined'\r\n                        size='small'\r\n                        value={formatAccountNumber(activePayment.accountNumber)}\r\n                        defaultValue='0'\r\n                        InputProps={{\r\n                          readOnly: state.isReadOnly\r\n                        }}\r\n                        onChange={e => changeActivePayment(e)}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                      <TextField\r\n                        name='accountName'\r\n                        id='accountName'\r\n                        type='text'\r\n                        label='ชื่อ-สกุล'\r\n                        variant='outlined'\r\n                        size='small'\r\n                        value={activePayment.accountName}\r\n                        defaultValue='0'\r\n                        InputProps={{\r\n                          readOnly: state.isReadOnly\r\n                        }}\r\n                        onChange={e => changeActivePayment(e)}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              ) : null}\r\n              <Grid\r\n                container\r\n                spacing={1}\r\n                direction='row'\r\n                justify='flex-start'\r\n                alignItems='center'>\r\n                <Grid item xs={4} sm={3}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={state.isCash}\r\n                        onChange={toggleCash}\r\n                        name='isCash'\r\n                        color='primary'\r\n                      />\r\n                    }\r\n                    label='เงินสด'\r\n                  />\r\n                </Grid>\r\n                {state.isCash ? (\r\n                  <Grid item xs={6} sm={6}>\r\n                    <TextField\r\n                      name='cashAmount'\r\n                      id='cashAmount'\r\n                      type='number'\r\n                      label='Cash Amount'\r\n                      variant='outlined'\r\n                      size='small'\r\n                      value={state.cashAmount}\r\n                      defaultValue='0'\r\n                      onChange={e =>\r\n                        setState({ ...state, cashAmount: e.target.value })\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                ) : null}\r\n              </Grid>\r\n\r\n              <Button color='primary' style={{ margin: '0 0 0 0' }} block>\r\n                ยืนยันการจ่ายเงิน\r\n              </Button>\r\n            </Container>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CheckModal\r\n","C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\actions\\partnerActions.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\types.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\modal\\DeleteModal.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\search\\PartnerSearch.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\partnerReducer.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\reducers\\transactionReducer.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\master\\banks.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\master\\accountTypes.js",[],"C:\\Users\\tjiw\\Downloads\\e-scale\\client\\src\\components\\auth\\customHook.js",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":46,"column":6,"nodeType":"145","endLine":46,"endColumn":17,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":2,"column":27,"nodeType":"149","messageId":"150","endLine":2,"endColumn":33},{"ruleId":"139","replacedBy":"151"},{"ruleId":"141","replacedBy":"152"},{"ruleId":"147","severity":1,"message":"153","line":68,"column":10,"nodeType":"149","messageId":"150","endLine":68,"endColumn":17},{"ruleId":"147","severity":1,"message":"154","line":68,"column":19,"nodeType":"149","messageId":"150","endLine":68,"endColumn":29},{"ruleId":"147","severity":1,"message":"155","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":26},{"ruleId":"147","severity":1,"message":"156","line":11,"column":10,"nodeType":"149","messageId":"150","endLine":11,"endColumn":20},{"ruleId":"147","severity":1,"message":"157","line":26,"column":10,"nodeType":"149","messageId":"150","endLine":26,"endColumn":30},{"ruleId":"143","severity":1,"message":"158","line":59,"column":6,"nodeType":"145","endLine":59,"endColumn":21,"suggestions":"159"},{"ruleId":"147","severity":1,"message":"160","line":95,"column":9,"nodeType":"149","messageId":"150","endLine":95,"endColumn":22},{"ruleId":"161","severity":1,"message":"162","line":424,"column":46,"nodeType":"163","messageId":"164","endLine":424,"endColumn":48},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'error', 'isAuthenticated', 'state', and 'toggle'. Either include them or remove the dependency array.","ArrayExpression",["167"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar",["165"],["166"],"'payment' is assigned a value but never used.","'setPayment' is assigned a value but never used.","'useEffect' is defined but never used.","'makeStyles' is defined but never used.","'checkSelectedPayment' is defined but never used.","React Hook useEffect has missing dependencies: 'calculateTotal', 'dispatch', and 'header.name'. Either include them or remove the dependency array.",["168"],"'appendPayment' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [error, isAuthenticated, prevError, state, toggle]",{"range":"173","text":"174"},"Update the dependencies array to be: [calculateTotal, dispatch, header.isOpen, header.name]",{"range":"175","text":"176"},[1050,1061],"[error, isAuthenticated, prevError, state, toggle]",[1315,1330],"[calculateTotal, dispatch, header.isOpen, header.name]"]